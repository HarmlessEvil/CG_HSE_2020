#pragma kernel ComputeHarmonics

#define PI            3.14159265359f
#define TWO_PI        6.28318530718f
#define FOUR_PI       12.56637061436f
#define INV_PI        0.31830988618f
#define INV_TWO_PI    0.15915494309f
#define INV_FOUR_PI   0.07957747155f
#define HALF_PI       1.57079632679f
#define INV_HALF_PI   0.636619772367f

#define K_0_0         1.0f

#define K_1_INV_1     2.0f
#define P_1_INV_1(v)  (v.y)

#define K_1_0         2.0f
#define P_1_0(v)      (v.z)

#define K_1_1         2.0f
#define P_1_1(v)      (v.x)

#define K_2_INV_2     3.75f
#define P_2_INV_2(v)  (v.y * v.x)

#define K_2_INV_1     3.75f
#define P_2_INV_1(v)  (v.y * v.z)

#define K_2_0         0.625f // 5 / 8
#define P_2_0(v)      (3 * v.z * v.z - 1)

#define K_2_1         3.75f
#define P_2_1(v)      (v.x * v.z)

#define K_2_2         0.234375f // 15 / 64
#define P_2_2(v)      (v.x * v.x - v.y * v.y)

RWStructuredBuffer<float4> SH_0_1_r;
RWStructuredBuffer<float4> SH_0_1_g;
RWStructuredBuffer<float4> SH_0_1_b;

RWStructuredBuffer<float4> SH_2_r;
RWStructuredBuffer<float4> SH_2_g;
RWStructuredBuffer<float4> SH_2_b;

RWStructuredBuffer<float4> SH_2_rgb;

TextureCube<half4> _Env;
SamplerState samplerLinearRepeat;

uint Hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

float Random(uint seed)
{
    return float(Hash(seed)) / 4294967295.0; // 2^32-1
}

float3 SampleColor(float3 direction)
{   
    float4 tex = _Env.SampleLevel(samplerLinearRepeat, direction, 0);
    return tex.rgb;
}

float pow2(float x)
{
    return x * x;
}

[numthreads(1024, 1, 1)]
void ComputeHarmonics(uint id : SV_DispatchThreadID)
{
    const int THREADS = 1024;
    const int SAMPLES = 100;
    
    // See SH.shader for more details
    float4 results[7] = {
        float4(0, 0, 0, 0), // SH_0_1_r
        float4(0, 0, 0, 0), // SH_0_1_g
        float4(0, 0, 0, 0), // SH_0_1_b
        
        float4(0, 0, 0, 0), // SH_2_r
        float4(0, 0, 0, 0), // SH_2_g
        float4(0, 0, 0, 0), // SH_2_b
        
        float4(0, 0, 0, 0), // SH_2_rgb
    };
    
    // Populate results buffer using monte-carlo method.
    // You can see the Random(i) function. Use it just as with the previous task.
    
    // TASK: project light from _Env to spherical harmonic coefficients and store them in results[]

    for (int i = 0; i < SAMPLES; ++i)
    {
        uint seed = THREADS * id + i;
        float cos_theta = Random(seed) * 2 - 1;
        float sin_theta = sqrt(1 - pow2(cos_theta));
        if (Random(seed + 2 * SAMPLES) > 0.5f)
        {
            sin_theta *= -1;
        }

        float alpha = Random(seed + SAMPLES) * 2 * PI;
        float cos_alpha = cos(alpha);
        float sin_alpha = sin(alpha);

        float3 w;
        w.x = sin_theta * cos_alpha;
        w.y = sin_theta * sin_alpha;
        w.z = cos_theta;

        float3 light = SampleColor(w);

        results[0].x += light.r * P_1_1(w);
        results[0].y += light.r * P_1_INV_1(w);
        results[0].z += light.r * P_1_0(w);
        results[0].w += light.r;

        results[1].x += light.g * P_1_1(w);
        results[1].y += light.g * P_1_INV_1(w);
        results[1].z += light.g * P_1_0(w);
        results[1].w += light.g;

        results[2].x += light.b * P_1_1(w);
        results[2].y += light.b * P_1_INV_1(w);
        results[2].z += light.b * P_1_0(w);
        results[2].w += light.b;

        results[3].x += light.r * P_2_INV_2(w);
        results[3].y += light.r * P_2_INV_1(w);
        results[3].z += light.r * P_2_1(w);
        results[3].w += light.r * P_2_0(w);

        results[4].x += light.g * P_2_INV_2(w);
        results[4].y += light.g * P_2_INV_1(w);
        results[4].z += light.g * P_2_1(w);
        results[4].w += light.g * P_2_0(w);

        results[5].x += light.b * P_2_INV_2(w);
        results[5].y += light.b * P_2_INV_1(w);
        results[5].z += light.b * P_2_1(w);
        results[5].w += light.b * P_2_0(w);

        results[6].x += light.r * P_2_2(w);
        results[6].y += light.g * P_2_2(w);
        results[6].z += light.b * P_2_2(w);
    }

    results[0].w *= K_0_0;
    results[1].w *= K_0_0;
    results[2].w *= K_0_0;

    results[0].x *= K_1_INV_1;
    results[1].x *= K_1_INV_1;
    results[2].x *= K_1_INV_1;

    results[0].y *= K_1_0;
    results[1].y *= K_1_0;
    results[2].y *= K_1_0;

    results[0].z *= K_1_1;
    results[1].z *= K_1_1;
    results[2].z *= K_1_1;

    results[3].x *= K_2_INV_2;
    results[4].x *= K_2_INV_2;
    results[5].x *= K_2_INV_2;
    
    results[3].y *= K_2_INV_1;
    results[4].y *= K_2_INV_1;
    results[5].y *= K_2_INV_1;

    results[3].z *= K_2_1;
    results[4].z *= K_2_1;
    results[5].z *= K_2_1;

    results[3].w *= K_2_2;
    results[4].w *= K_2_2;
    results[5].w *= K_2_2;
    
    results[6] *= K_2_0;
    
    SH_0_1_r[id] = results[0] / SAMPLES;
    SH_0_1_g[id] = results[1] / SAMPLES;
    SH_0_1_b[id] = results[2] / SAMPLES;
    
    SH_2_r[id] = results[3] / SAMPLES;
    SH_2_g[id] = results[4] / SAMPLES;
    SH_2_b[id] = results[5] / SAMPLES;    
    
    SH_2_rgb[id] = results[6] / SAMPLES;
}
